{"config":{"lang":["de"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"index.html#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"index.html#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"schleifen.html","title":"Wiederholung von Vorg\u00e4ngen durch Schleifen","text":"<p>Die <code>while</code>-Anweisung pr\u00fcft eine Bedingung und f\u00fchrt die Anweisung oder den Anweisungsblock nach <code>while</code> aus. Damit wird die Bedingung wiederholt \u00fcberpr\u00fcft und die Ausf\u00fchrung dieser Anweisungen wiederholt, bis die Bedingung \"false\" lautet. <pre><code>while(BEDINGUNG == true)\n{\n// Codeblock wird solange ausgef\u00fchrt, bis BEDINGUNG nicht mehr TRUE\n}\n</code></pre></p> <p>Wichtig!</p> <p>Stellen Sie sicher, dass die Schleifenbedingung <code>while</code> zu \"false\" wechselt, nachdem Sie den Code ausgef\u00fchrt haben. Andernfalls erstellen Sie eine Endlosschleife, durch die das Programm niemals beendet wird.</p>"},{"location":"schleifen.html#kopfgesteuerte-while-schleife","title":"Kopfgesteuerte <code>while</code>-Schleife","text":"<pre><code>int counter = 0;\nwhile (counter &lt; 5)\n{\nConsole.WriteLine($\"Hello World! The counter is {counter}\");\ncounter++;\n}\n// This example produces the following output:\n//\n// Hello World! The counter is 0\n// Hello World! The counter is 1\n// Hello World! The counter is 2\n// Hello World! The counter is 3\n// Hello World! The counter is 4\n</code></pre>"},{"location":"schleifen.html#fugesteuerte-while-schleife","title":"Fu\u00dfgesteuerte <code>while</code>-Schleife","text":"<p>Die <code>do...while</code>-Schleife f\u00fchrt den Code zuerst aus und \u00fcberpr\u00fcft anschlie\u00dfend die Bedingung. Die <code>do...while</code>-Schleife wird im folgenden Code gezeigt: <pre><code>int counter = 0;\ndo\n{\nConsole.WriteLine($\"Hello World! The counter is {counter}\");\ncounter++;\n} while (counter &lt; 5);\n// This example produces the following output:\n//\n// Hello World! The counter is 0\n// Hello World! The counter is 1\n// Hello World! The counter is 2\n// Hello World! The counter is 3\n// Hello World! The counter is 4\n</code></pre></p>"},{"location":"schleifen.html#for-schleife","title":"<code>for</code>-Schleife","text":"<p>Da die Operationen INITIALISIERUNG, Pr\u00fcfung der BEDINGUNG und die WERTVER\u00c4NDERUNG sehr oft in einer Schleife ben\u00f6tigt werden, wird hierf\u00fcr oft die <code>for-Schleife</code> verwendet. Diese ist \u00fcbersichtlicher, da die drei Operationen direkt an einem Ort stehen: <pre><code>for (INITIALISIERUNG; BEDINGUNG; WERTVER\u00c4NDERUNG) {\n// auszuf\u00fchrender Quellcode\n}\n</code></pre></p> <p>Jede <code>for</code>-Schleife l\u00e4sst sich in eine <code>while</code>-Schleife \u00fcbersetzen: <pre><code>INITIALISIERUNG;\nwhile(BEDINGUNG) {\n// auszuf\u00fchrender Quellcode\nWERTVER\u00c4NDERUNG // (immer die letzte Anweisung)\n}\n</code></pre></p>"},{"location":"schleifen.html#beispiel","title":"Beispiel","text":"<pre><code>for (int counter = 0; counter &lt; 5; counter++) {\nConsole.WriteLine($\"Hello World! The counter is {counter}\");\n}\n// This example produces the following output:\n//\n// Hello World! The counter is 0\n// Hello World! The counter is 1\n// Hello World! The counter is 2\n// Hello World! The counter is 3\n// Hello World! The counter is 4\n</code></pre>"},{"location":"schleifen.html#beispiel-array","title":"Beispiel Array","text":"<p><pre><code>string[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\nfor(int i = 0; i &lt; cars.Length; i++) {\nConsole.WriteLine(cars[i]);\n}\n// This example produces the following output:\n//\n// Volvo\n// BMW\n// Ford\n// Mazda\n</code></pre> Diese Schleife ist equivalent zum Array-Beispiel der foreach-Schleife.</p> <p>Dieses Beispiel hat das gleiche Verhalten wie die while-Schleife, jedoch sind die Initialisierung, Bedingung und Wert\u00e4nderung an einer Stelle. Der Vorteil zeigt sich vor allem bei l\u00e4ngeren Codebl\u00f6cken, bei denen bei der <code>while</code>-Schleife erst am Ende des Blocks die Wert\u00e4nderung stattfinden w\u00fcrde.</p>"},{"location":"schleifen.html#foreach-schleife","title":"<code>foreach</code>-Schleife","text":"<p>Beim Iterieren von Listen und Arrays wird der Index der <code>for</code>-Schleife oft nur gef\u00fchrt, um auf ein Element zuzugreifen.</p> <p>Eine indexlose Alternative bietet die <code>foreach</code>-Schleife:</p> <pre><code>foreach(type variableName in arrayName) {\n// auszuf\u00fchrender Quellcode\n}\n</code></pre> <p>In der <code>foreach</code>-Schleife wird <code>variableName</code> in jedem Durchgang mit dem n\u00e4chsten Array- bzw. Listenelement belegt.</p>"},{"location":"schleifen.html#beispiel-array_1","title":"Beispiel Array","text":"<p><pre><code>string[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\nforeach (string car in cars) {\nConsole.WriteLine(car);\n}\n// This example produces the following output:\n//\n// Volvo\n// BMW\n// Ford\n// Mazda\n</code></pre> Diese Schleife ist equivalent zum Array-Beispiel der for-Schleife.</p>"},{"location":"schleifen.html#beispiel-liste","title":"Beispiel Liste","text":"<pre><code>List&lt;string&gt; cars = new List&lt;string&gt;;\ncars.Add(\"Volvo\");\ncars.Add(\"BMW\");\ncars.Add(\"Ford\");\ncars.Add(\"Mazda\");\nforeach (string car in cars) {\nConsole.WriteLine(car);\n}\n// This example produces the following output:\n//\n// Volvo\n// BMW\n// Ford\n// Mazda\n</code></pre>"},{"location":"string.html","title":"String","text":""},{"location":"string.html#initialisieren","title":"Initialisieren","text":"<pre><code>// Declare without initializing.\nstring message1;\n// Initialize with string\nstring message2 = \"World\";\n// Set string content\nmessage1 = \"Hello\";\n// String concatination\nmessage3 = message1 + \" \" + message2;\n// Yields the same output\nConsole.WriteLine($\"{message1} {message2}!\");\nConsole.WriteLine(message3 + \"!\");\n// This example produces the following output:\n// Hello World!\n// Hello World\n</code></pre>"},{"location":"string.html#zeichenfolge-finden-contains","title":"Zeichenfolge finden (Contains)","text":"<p>Die Methode Contains() findet eine beliebige Zeichenfolge in einem String. Sie gibt TRUE zur\u00fcck, wenn die Zeichenfolge gefunden wurde, andernfalls FALSE. <pre><code>string s1 = \"The quick brown fox jumps over the lazy dog\";\nstring s2 = \"fox\";\nbool b = s1.Contains(s2);\nif(b) {\nConsole.WriteLine(\"Found!);\n} else {\nConsole.WriteLine(\"Not found!\");\n}\n// This example produces the following output:\n// Found!\n</code></pre></p>"},{"location":"string.html#zeichen-ersetzen-replace","title":"Zeichen ersetzen (Replace)","text":"<p>Die Methode Replace() ersetzt die angegebenen Zeichen bzw. Zeichenfolgen im angegebenen String: <pre><code>string str = \"1 2 3 4 5 6 7 8 9\";\nConsole.WriteLine($\"Original string: \\\"{str}\\\"\");\nstring str2 = str.Replace(' ', ',');\nConsole.WriteLine($\"New string:      \\\"{str}\\\"\");\n// This example produces the following output:\n// Original string: \"1 2 3 4 5 6 7 8 9\"\n// New string:      \"1,2,3,4,5,6,7,8,9\"\n</code></pre></p>"},{"location":"string.html#string-teilen-split","title":"String Teilen (Split)","text":"<p>Mit Split() wird ein String am angegebenen Zeichen aufgeteilt. Sie gibt ein Array zur\u00fcck, das die Teile des Strings ohne das Trennzeichen enth\u00e4lt. Das Trennzeichen wird dabei entfernt. <pre><code>string s = \"You win some. You lose some.\";\nstring[] subs = s.Split(' ');\nConsole.WriteLine($\"Substring: {subs[0]}\");\nConsole.WriteLine($\"Substring: {subs[4]}\");\nConsole.WriteLine($\"Substring: {subs[5]}\");\n// This example produces the following output:\n//\n// Substring: You\n// Substring: lose\n// Substring: some.\n</code></pre></p>"},{"location":"string.html#gro-und-kleinbuchstaben-toupper-tolower","title":"Gro\u00df- und Kleinbuchstaben (ToUpper, ToLower)","text":"<p>Mit den Methoden ToUpper() und ToLower() wird ein String in Gro\u00df- bzw. Kleinbuchstaben umgewandelt: <pre><code>string karen = \"i wAnT tO sPEak wiTh yOuR mAnaGer\";\nstring upperKaren = karen.ToUpper();\nstring lowerKaren = karen.ToLower();\nConsole.WriteLine($\"Uppercase: {upperKaren}\");\nConsole.WriteLine($\"Lowercase: {lowerKaren}\");\n// This example produces the following output:\n//\n// Uppercase: I WANT TO SPEAK WITH YOUR MANAGER\n// Lowercase: i want to speak with your manager\n</code></pre></p>"},{"location":"string.html#uberflussige-leerzeichen-entfernen-trim","title":"\u00dcberfl\u00fcssige Leerzeichen entfernen (Trim)","text":"<p>Mit Trim() werden Leerzeichen am Anfang bzw. am Ende entfernt. TrimStart() entfernt Leerzeichen vor dem ersten Zeichen, TrimEnd() entfernt Leerzeichen am Ende. Trim() entfernt die Leerzeichen am Anfang und am Ende. <pre><code>string whiteSpace = \"    Teststring    \";\nstring trimStart = whiteSpace.TrimStart();\nstring trimEnd = whiteSpace.TrimEnd();\nstring trim = whiteSpace.Trim();\nConsole.WriteLine($\"TrimStart: \\\"{trimStart}\\\"\");\nConsole.WriteLine($\"TrimEnd: \\\"{trimEnd}\\\"\");\nConsole.WriteLine($\"Trim: \\\"{trim}\\\"\");\n// This example produces the following output:\n//\n// TrimStart: \"Teststring    \"\n// TrimEnd: \"    Teststring\"\n// Trim: \"Teststring\"\n</code></pre></p>"}]}